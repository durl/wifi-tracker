#!/usr/bin/python
"""Wifi Tracker.

Usage:
    {basename} sniff <interface> [options]
    {basename} show (devices|stations) [options]
    {basename} kill
    {basename} -h | --help
    {basename} --version

Options:
    -h --help           Show help.
    --debug             Print debugging messages.
    --nooui             Omit OUI vendor lookup. This might be usefull if
                        no internet connection is availaible.

Commands:
    sniff           Sniff probe requests sent by devices in your area.
    show            Show tracked devices or wifi stations.
                    (this operation could take some time)
    kill            Kill the last startet sniffer process.
"""

import datetime
import logging
import os

from docopt import docopt
from wifitracker import __version__

PID_FILE = '/var/opt/wifi-tracker/pid.lock'
DATA_DIR = '/var/opt/wifi-tracker'

log = logging.getLogger(__name__)

if __name__ == "__main__":
    # parse commandline options:
    args = docopt(__doc__.format(basename=__file__), version=__version__)
    if args['--debug']:
        logging.getLogger().setLevel(logging.DEBUG)
    log.debug(args)

    # execute command:
    if args['sniff']:
        from wifitracker import sniffer
        log.info("PID: {}".format(os.getpid()))
        with open(PID_FILE, 'w') as file:
            file.write(str(os.getpid()))
        try:
            start_dts = datetime.datetime.now()
            sniffer.sniff(args['<interface>'])
        except Exception as e:
            print e
    elif args['show']:
        from wifitracker.tracker import Tracker, json_pretty, set_vendors
        tracker = Tracker(DATA_DIR)
        if args['devices']:
            devices = tracker.get_devices(load_dts=datetime.datetime.now())
            if not args['--nooui']:
                set_vendors(devices)
            for id in devices:
                print json_pretty(devices[id])
        elif args['stations']:
            stations = tracker.get_stations(load_dts=datetime.datetime.now())
            for id in stations:
                print json_pretty(stations[id])

    elif args['kill']:
        with open(PID_FILE, 'r') as file:
            pid = int(file.read())
        os.kill(pid, 9)
