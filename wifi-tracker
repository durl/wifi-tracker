#!/usr/bin/python
"""Wifi Tracker.

Usage:
    {basename} sniff <interface> [options]
    {basename} -h | --help
    {basename} --version

Options:
    -h --help           Show help.
    --debug             Print debugging messages.
    --dump_dir=<dir>    Specifies the location where sniffing results should be
                        dumped.

Commands:
    sniff           Sniff probe requests sent by devices in your area.
"""

import datetime
import logging
import os

from docopt import docopt
from wifitracker import sniffer, __version__, STORAGE


log = logging.getLogger(__name__)


def dump(start_dts, end_dts):
    filename = 'devices_{}_{}.csv'.format(start_dts.strftime('%Y%m%d-%H%M%S'),
                                          end_dts.strftime('%Y%m%d-%H%M%S'))
    with open(filename, 'w') as file:
        for key in STORAGE.storage:
            if key.startswith('Device'):
                device = STORAGE.storage[key]
                device_line = '{};{} [{}];{}\n'.format(device.device_mac,
                                                       device.vendor_company,
                                                       device.vendor_country,
                                                       str(device.known_ssids))
                file.write(device_line)


if __name__ == "__main__":
    # parse commandline options:
    args = docopt(__doc__.format(basename=__file__), version=__version__)
    if args['--debug']:
        logging.getLogger().setLevel(logging.DEBUG)
    log.debug(args)
    log.info("PID: {}".format(os.getpid()))

    # execute command:
    if args['sniff']:
        try:
            start_dts = datetime.datetime.now()
            sniffer.sniff(args['<interface>'], dump_dir=args['--dump_dir'])
        except Exception as e:
            print e
        finally:
            end_dts = datetime.datetime.now()
            if not args['--dump_dir']:
                dump(start_dts, end_dts)
