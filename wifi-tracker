#!/usr/bin/python
"""wifi-tracker: Track wifi devices in your area.

Usage:
    wifi-tracker sniff <interface> [options]
    wifi-tracker show (devices|stations|aliases) [<id>] [options]
    wifi-tracker set <device_mac> <alias> [--force]
    wifi-tracker kill
    wifi-tracker monitor <interface> (start|stop) [--force]
    wifi-tracker -h | --help
    wifi-tracker --version

Options:
    -h --help           Show help.
    --debug             Print debugging messages.
    --nooui             Omit OUI vendor lookup. This might be usefull if
                        no internet connection is availaible.
    --noalias           Ignore alias file.

Commands:
    sniff           Sniff probe requests sent by devices in your area.
    show            Show tracked devices or wifi stations.
                    (this operation could take some time)
    set             Set an alias for a known device.
    kill            Kill the last startet sniffer process.
    monitor         Start or stop monitor mode on specified interface.
"""

import datetime
import logging
import os
import sys
from subprocess import Popen, PIPE


from docopt import docopt
from wifitracker import __version__

PID_FILE = '/var/opt/wifi-tracker/pid.lock'
DATA_DIR = '/var/opt/wifi-tracker'

log = logging.getLogger(__name__)


def check_monitor(interface):
    iw_out = iwconfig(interface)
    if 'IEEE 802.11' in iw_out:
        if 'Mode:Monitor' in iw_out:
            return True
        else:
            if 'Not-Associated' in iw_out:
                return False
            else:
                raise InterfaceBusyError("wireless network interface in use")
    else:
        raise InterfaceError("not a wireless network interface")


def iwconfig(interface):
    iwconfig = Popen(['iwconfig', interface], stdout=PIPE, stderr=PIPE)
    iwconfig_out, iwconfig_err = iwconfig.communicate()
    exit = iwconfig.returncode
    if exit == 0:
        return iwconfig_out
    else:
        raise InterfaceError(iwconfig_err)


def start_monitor(interface, force=False):
    try:
        monitor = check_monitor(interface)
    except InterfaceBusyError as e:
        if force:
            monitor = False
        else:
            raise e
    if monitor:
        # already running
        return True
    else:
        os.system('ifconfig {} down'.format(interface))
        os.system('iwconfig {} mode monitor'.format(interface))
        os.system('ifconfig {} up'.format(interface))
    return True


def stop_monitor(interface):
    monitor = check_monitor(interface)
    if monitor:
        os.system('ifconfig {} down'.format(interface))
        os.system('iwconfig {} mode managed'.format(interface))
        os.system('ifconfig {} up'.format(interface))
        return True
    else:
        return False


class InterfaceError(EnvironmentError):
    def __init__(self, msg):
        self.msg = msg

    def __str__(self):
        return self.msg


class InterfaceBusyError(EnvironmentError):
    def __init__(self, msg):
        self.msg = msg

    def __str__(self):
        return self.msg


def print_jsons(object_dict):
    jsons = [json_pretty(object_dict[id]) for id in object_dict]
    print '['
    print ',\n'.join(jsons)
    print ']'


def show_devices(tracker, args):
    # read aliases:
    if not args['--noalias']:
        try:
            aliases = tracker.get_aliases()
        except IOError as e:
            print e
            print "Try again with --noalias."
            sys.exit(1)
    else:
        aliases = {}
    # get all devices:
    if not args['<id>']:
        devices = tracker.get_devices(load_dts=datetime.datetime.now(),
                                      aliases=aliases)
        if not args['--nooui']:
            set_vendors(devices)
        print_jsons(devices)
    # get only one device:
    else:
        id = args['<id>']
        alias = aliases[id] if id in aliases else None
        device = tracker.get_device(id,
                                    load_dts=datetime.datetime.now(),
                                    alias=alias)
        device.set_vendor()
        print_jsons({id: device})


def show_stations(tracker, args):
    if not args['<id>']:
        stations = tracker.get_stations(load_dts=datetime.datetime.now())
        print_jsons(stations)
    else:
        id = args['<id>']
        station = tracker.get_station(id, load_dts=datetime.datetime.now())
        print_jsons({id: station})


def start_sniffer(args):
    from wifitracker import sniffer
    pid = os.getpid()
    interface = args['<interface>']
    log.info("PID: {}".format(pid))
    with open(PID_FILE, 'w') as file:
        file.write(str(pid))
    try:
        sniffer.sniff(interface)
    except Exception as e:
        print e


if __name__ == "__main__":
    # parse commandline options:
    args = docopt(__doc__, version=__version__)
    if args['--debug']:
        logging.getLogger().setLevel(logging.DEBUG)
    log.debug(args)

    # execute command:
    if args['sniff']:
        start_sniffer(args)
    elif args['show']:
        from wifitracker.tracker import Tracker, json_pretty, set_vendors
        tracker = Tracker(DATA_DIR)
        if args['devices']:
            show_devices(tracker, args)
        elif args['stations']:
            show_stations(tracker, args)
        elif args['aliases']:
            try:
                aliases = tracker.get_aliases()
                print aliases
            except IOError as e:
                print e
                sys.exit(1)
    elif args['set']:
        from wifitracker.tracker import Tracker
        tracker = Tracker(DATA_DIR)
        try:
            tracker.set_device_alias(args['<device_mac>'], args['<alias>'],
                                     force=args['--force'])
        except ValueError:
            print "ERROR: Alias for device {} already set."
            print "\t Use --force to set new alias."
            sys.exit(1)
        except IOError as e:
            print e
            sys.exit(1)
    elif args['kill']:
        with open(PID_FILE, 'r') as file:
            pid = int(file.read())
        try:
            os.kill(pid, 9)
        except OSError as e:
            print "ERROR: {}".format(e.strerror)
    elif args['monitor']:
        interface = args['<interface>']
        if args['start']:
            try:
                start_monitor(interface, force=args['--force'])
            except InterfaceBusyError as be:
                print "ERROR: {}".format(be.msg)
                print "\tUse --force to start anyway."
                print "\tBe aware that the interface will lose connectivity."
                sys.exit(1)
            except InterfaceError as ie:
                print "ERROR: {}".format(ie.msg)
                sys.exit(1)
        elif args['stop']:
            try:
                stop_monitor(interface)
            except Exception as e:
                print "ERROR: {}".format(e)
                sys.exit(1)
